From 2726d1fe715e5750c5ce906d5151e0221ff5232d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Janne=20M=C3=A4ntyharju?= <janne.mantyharju@iki.fi>
Date: Tue, 22 Nov 2011 23:22:10 +0200
Subject: [PATCH] SPI Data transfer for Aurora telemetry

---
 ArduPlane/ArduPlane.pde           |   14 +++--
 ArduPlane/hss.pde                 |   98 ++++++++++++++++++++++++++++++++++
 libraries/DataFlash/DataFlash.cpp |  106 ++++++++++++++++++------------------
 3 files changed, 159 insertions(+), 59 deletions(-)
 create mode 100644 ArduPlane/hss.pde

diff --git a/ArduPlane/ArduPlane.pde b/ArduPlane/ArduPlane.pde
index fbee3da..adfb9f3 100644
--- a/ArduPlane/ArduPlane.pde
+++ b/ArduPlane/ArduPlane.pde
@@ -410,6 +410,7 @@ AP_Relay relay;
 void setup() {
 	memcheck_init();
 	init_ardupilot();
+	hss_setup();
 }
 
 void loop()
@@ -464,13 +465,13 @@ static void fast_loop()
 	read_radio();
 
     // try to send any deferred messages if the serial port now has
-    // some space available    
+    // some space available
     gcs_send_message(MSG_RETRY_DEFERRED);
 
 	// check for loss of control signal failsafe condition
 	// ------------------------------------
 	check_short_failsafe();
-	
+
 		// Read Airspeed
 		// -------------
 	if (g.airspeed_enabled == true) {
@@ -528,6 +529,7 @@ static void fast_loop()
 
 static void medium_loop()
 {
+	hss_update();
 	// This is the start of the medium (10 Hz) loop pieces
 	// -----------------------------------------
 	switch(medium_loopCounter) {
@@ -817,11 +819,11 @@ static void update_current_flight_mode(void)
 				if ((current_loc.alt>=home.alt+g.FBWB_min_altitude) || (g.FBWB_min_altitude == -1)) {
 	 				altitude_error = g.channel_pitch.norm_input() * g.pitch_limit_min;
 				} else {
-					if (g.channel_pitch.norm_input()<0) 
-						altitude_error =( (home.alt + g.FBWB_min_altitude) - current_loc.alt) + g.channel_pitch.norm_input() * g.pitch_limit_min ; 
-					else altitude_error =( (home.alt + g.FBWB_min_altitude) - current_loc.alt) ;                                    
+					if (g.channel_pitch.norm_input()<0)
+						altitude_error =( (home.alt + g.FBWB_min_altitude) - current_loc.alt) + g.channel_pitch.norm_input() * g.pitch_limit_min ;
+					else altitude_error =( (home.alt + g.FBWB_min_altitude) - current_loc.alt) ;
 				}
- 
+
 				if (g.airspeed_enabled == true)
 									{
 					airspeed_fbwB = ((int)(g.flybywire_airspeed_max -
diff --git a/ArduPlane/hss.pde b/ArduPlane/hss.pde
new file mode 100644
index 0000000..a8d4f04
--- /dev/null
+++ b/ArduPlane/hss.pde
@@ -0,0 +1,98 @@
+/*
+ * Functions for sending telemetry data via SPI to Hitec sensor station emulator
+ *
+ * Code: Janne MŠntyharju
+ */
+
+
+#define HSS_SS 60	// PF6, chip select
+
+enum hss_states {
+	hss_start = 0,
+	hss_temp,
+	hss_voltage,
+	hss_amps,
+	hss_current_total,
+	hss_battery_remaining,
+	hss_alt,
+	hss_groundspeed,
+	hss_num_satellites,
+	hss_airspeed,
+	hss_throttle,
+	hss_end
+};
+
+static byte hss_state = 0;
+
+void hss_setup()
+{
+	pinMode(HSS_SS, OUTPUT);
+}
+
+void hss_update()
+{
+	unsigned int v;
+
+	digitalWrite(HSS_SS, LOW);
+	delay(1);
+
+	switch (hss_state) {
+		case hss_start:
+			SPI.transfer('*');
+			SPI.transfer('*');
+			break;
+		case hss_temp:
+			SPI.transfer(barometer.Temp >> 8);
+			SPI.transfer(barometer.Temp);
+			break;
+		case hss_voltage:
+			v = (battery_voltage * 10.0);
+			SPI.transfer(v >> 8);
+			SPI.transfer(v);
+			break;
+		case hss_amps:
+			v = (current_amps * 10.0);
+			SPI.transfer(v >> 8);
+			SPI.transfer(v);
+			break;
+		case hss_current_total:
+			v = current_total;
+			SPI.transfer(v >> 8);
+			SPI.transfer(v);
+			break;
+		case hss_battery_remaining:
+			v = (5.0 * (g.pack_capacity - current_total) / g.pack_capacity);;
+			SPI.transfer(0);
+			SPI.transfer(v);
+			break;
+		case hss_alt:
+			v = current_loc.alt / 100.0;
+			SPI.transfer(v >> 8);
+			SPI.transfer(v);
+			break;
+		case hss_groundspeed:
+			v = g_gps->ground_speed * 0.036;	// convert to km/h
+			SPI.transfer(v >> 8);
+			SPI.transfer(v);
+			break;
+		case hss_num_satellites:
+			SPI.transfer(0);
+			SPI.transfer(g_gps->num_sats);
+			break;
+		case hss_airspeed:
+			v = airspeed * 0.036;	// convert to km/h
+			SPI.transfer(v);
+			SPI.transfer(v);
+			break;
+		case hss_throttle:
+			v = g.channel_throttle.servo_out;
+			SPI.transfer(v);
+			SPI.transfer(v);
+			break;
+	}
+	digitalWrite(HSS_SS, HIGH);
+
+	hss_state++;
+	if (hss_state == hss_end)
+		hss_state = 0;
+}
diff --git a/libraries/DataFlash/DataFlash.cpp b/libraries/DataFlash/DataFlash.cpp
index 30c5174..519536f 100644
--- a/libraries/DataFlash/DataFlash.cpp
+++ b/libraries/DataFlash/DataFlash.cpp
@@ -26,9 +26,9 @@
 		ReadByte()
 		ReadInt()
 		ReadLong()
-		
+
 	Properties:
-			
+
 */
 
 #include "DataFlash.h"
@@ -69,14 +69,14 @@ void DataFlash_Class::Init(void)
   #endif
 
   df_Read_END=false;
-  
+
   dataflash_CS_inactive();     //disable device
-  
+
   // Setup SPI  Master, Mode 3, fosc/4 = 4MHz
   SPI.begin();
   SPI.setBitOrder(MSBFIRST);
   SPI.setDataMode(SPI_MODE3);
-  SPI.setClockDivider(SPI_CLOCK_DIV2);  
+  SPI.setClockDivider(SPI_CLOCK_DIV16);
 
   // get page size: 512 or 528
   df_PageSize=PageSize();
@@ -86,7 +86,7 @@ void DataFlash_Class::Init(void)
 void DataFlash_Class::ReadManufacturerID()
 {
   dataflash_CS_active();     // activate dataflash command decoder
- 
+
   // Read manufacturer and ID command...
   SPI.transfer(DF_READ_MANUFACTURER_AND_DEVICE_ID);
 
@@ -94,37 +94,37 @@ void DataFlash_Class::ReadManufacturerID()
   df_device_0 = SPI.transfer(0xff);
   df_device_1 = SPI.transfer(0xff);
   SPI.transfer(0xff);
-  
-  dataflash_CS_inactive();    // Reset dataflash command decoder  
+
+  dataflash_CS_inactive();    // Reset dataflash command decoder
 }
 
 // Read the status register
 byte DataFlash_Class::ReadStatusReg()
-{ 
+{
   byte tmp;
 
   dataflash_CS_active();     // activate dataflash command decoder
- 
+
   // Read status command
   SPI.transfer(DF_STATUS_REGISTER_READ);
   tmp = SPI.transfer(0x00);  // We only want to extract the READY/BUSY bit
-  
+
   dataflash_CS_inactive();    // Reset dataflash command decoder
-  
+
   return tmp;
 }
 
 // Read the status of the DataFlash
 inline
 byte DataFlash_Class::ReadStatus()
-{ 
+{
   return(ReadStatusReg()&0x80);  // We only want to extract the READY/BUSY bit
 }
 
 
 inline
 unsigned int DataFlash_Class::PageSize()
-{ 
+{
   return(528-((ReadStatusReg()&0x01)<<4));  // if first bit 1 trhen 512 else 528 bytes
 }
 
@@ -138,62 +138,62 @@ void DataFlash_Class::WaitReady()
 void DataFlash_Class::PageToBuffer(unsigned char BufferNum, unsigned int PageAdr)
 {
   dataflash_CS_active();     // activate dataflash command decoder
-  
-  if (BufferNum==1)				
+
+  if (BufferNum==1)
     SPI.transfer(DF_TRANSFER_PAGE_TO_BUFFER_1);
   else
     SPI.transfer(DF_TRANSFER_PAGE_TO_BUFFER_2);
-  
+
   if(df_PageSize==512){
-    SPI.transfer((unsigned char)(PageAdr >> 7));	
-    SPI.transfer((unsigned char)(PageAdr << 1));	
+    SPI.transfer((unsigned char)(PageAdr >> 7));
+    SPI.transfer((unsigned char)(PageAdr << 1));
   }else{
-    SPI.transfer((unsigned char)(PageAdr >> 6));	
+    SPI.transfer((unsigned char)(PageAdr >> 6));
     SPI.transfer((unsigned char)(PageAdr << 2));
   }
-  SPI.transfer(0x00);	// donÂ´t care bytes			
+  SPI.transfer(0x00);	// donÂ´t care bytes
 
   dataflash_CS_inactive();	//initiate the transfer
   dataflash_CS_active();
-  
+
   while(!ReadStatus());  //monitor the status register, wait until busy-flag is high
-  
+
   dataflash_CS_inactive();
 }
 
 void DataFlash_Class::BufferToPage (unsigned char BufferNum, unsigned int PageAdr, unsigned char wait)
 {
   dataflash_CS_active();     // activate dataflash command decoder
-  
-  if (BufferNum==1)	
+
+  if (BufferNum==1)
     SPI.transfer(DF_BUFFER_1_TO_PAGE_WITH_ERASE);
   else
     SPI.transfer(DF_BUFFER_2_TO_PAGE_WITH_ERASE);
 
   if(df_PageSize==512){
-    SPI.transfer((unsigned char)(PageAdr >> 7));	
-    SPI.transfer((unsigned char)(PageAdr << 1));	
+    SPI.transfer((unsigned char)(PageAdr >> 7));
+    SPI.transfer((unsigned char)(PageAdr << 1));
   }else{
-    SPI.transfer((unsigned char)(PageAdr >> 6));	
+    SPI.transfer((unsigned char)(PageAdr >> 6));
     SPI.transfer((unsigned char)(PageAdr << 2));
   }
-  SPI.transfer(0x00);	// donÂ´t care bytes			
+  SPI.transfer(0x00);	// donÂ´t care bytes
 
   dataflash_CS_inactive();	//initiate the transfer
   dataflash_CS_active();
-  
+
   // Check if we need to wait to write the buffer to memory or we can continue...
   if (wait)
 	while(!ReadStatus());  //monitor the status register, wait until busy-flag is high
-	
-  dataflash_CS_inactive();	//deactivate dataflash command decoder	
+
+  dataflash_CS_inactive();	//deactivate dataflash command decoder
 }
 
 void DataFlash_Class::BufferWrite (unsigned char BufferNum, unsigned int IntPageAdr, unsigned char Data)
 {
   dataflash_CS_active();     // activate dataflash command decoder
-  
-  if (BufferNum==1)	
+
+  if (BufferNum==1)
     SPI.transfer(DF_BUFFER_1_WRITE);
   else
     SPI.transfer(DF_BUFFER_2_WRITE);
@@ -201,17 +201,17 @@ void DataFlash_Class::BufferWrite (unsigned char BufferNum, unsigned int IntPage
   SPI.transfer((unsigned char)(IntPageAdr>>8));  //upper part of internal buffer address
   SPI.transfer((unsigned char)(IntPageAdr));	 //lower part of internal buffer address
   SPI.transfer(Data);				 //write data byte
-  
+
   dataflash_CS_inactive();   // disable dataflash command decoder
 }
-  
+
 unsigned char DataFlash_Class::BufferRead (unsigned char BufferNum, unsigned int IntPageAdr)
 {
   byte tmp;
 
   dataflash_CS_active();     // activate dataflash command decoder
-  
-  if (BufferNum==1)	
+
+  if (BufferNum==1)
     SPI.transfer(DF_BUFFER_1_READ);
   else
     SPI.transfer(DF_BUFFER_2_READ);
@@ -220,9 +220,9 @@ unsigned char DataFlash_Class::BufferRead (unsigned char BufferNum, unsigned int
   SPI.transfer((unsigned char)(IntPageAdr));	 //lower part of internal buffer address
   SPI.transfer(0x00);                            //don't cares
   tmp = SPI.transfer(0x00);		         //read data byte
-  
+
   dataflash_CS_inactive();   // deactivate dataflash command decoder
-  
+
   return (tmp);
 }
 // *** END OF INTERNAL FUNCTIONS ***
@@ -233,10 +233,10 @@ void DataFlash_Class::PageErase (unsigned int PageAdr)
   SPI.transfer(DF_PAGE_ERASE);   // Command
 
   if(df_PageSize==512){
-    SPI.transfer((unsigned char)(PageAdr >> 7));	
-    SPI.transfer((unsigned char)(PageAdr << 1));	
+    SPI.transfer((unsigned char)(PageAdr >> 7));
+    SPI.transfer((unsigned char)(PageAdr << 1));
   }else{
-    SPI.transfer((unsigned char)(PageAdr >> 6));	
+    SPI.transfer((unsigned char)(PageAdr >> 6));
     SPI.transfer((unsigned char)(PageAdr << 2));
   }
 
@@ -244,7 +244,7 @@ void DataFlash_Class::PageErase (unsigned int PageAdr)
   dataflash_CS_inactive();               //initiate flash page erase
   dataflash_CS_active();
   while(!ReadStatus());
-  
+
   dataflash_CS_inactive();   // deactivate dataflash command decoder
 }
 
@@ -258,11 +258,11 @@ void DataFlash_Class::ChipErase ()
   SPI.transfer(DF_CHIP_ERASE_1);
   SPI.transfer(DF_CHIP_ERASE_2);
   SPI.transfer(DF_CHIP_ERASE_3);
-  
+
   dataflash_CS_inactive();               //initiate flash page erase
   dataflash_CS_active();
   while(!ReadStatus());
-  
+
   dataflash_CS_inactive();   // deactivate dataflash command decoder
 }
 
@@ -297,7 +297,7 @@ void DataFlash_Class::FinishWrite(void)
 	else
         df_BufferNum=1;
 }
-	
+
 
 void DataFlash_Class::WriteByte(byte data)
 {
@@ -344,13 +344,13 @@ void DataFlash_Class::WriteLong(long data)
 }
 
 // Get the last page written to
-int DataFlash_Class::GetWritePage() 
+int DataFlash_Class::GetWritePage()
 {
   return(df_PageAdr);
 }
 
 // Get the last page read
-int DataFlash_Class::GetPage() 
+int DataFlash_Class::GetPage()
 {
   return(df_Read_PageAdr-1);
 }
@@ -368,7 +368,7 @@ void DataFlash_Class::StartRead(int PageAdr)
 byte DataFlash_Class::ReadByte()
 {
   byte result;
-  
+
   WaitReady();
   result = BufferRead(df_Read_BufferNum,df_Read_BufferIdx);
   df_Read_BufferIdx++;
@@ -389,7 +389,7 @@ byte DataFlash_Class::ReadByte()
 int DataFlash_Class::ReadInt()
 {
   int result;
-  
+
   result = ReadByte();               // High byte
   result = (result<<8) | ReadByte(); // Low byte
   return result;
@@ -398,9 +398,9 @@ int DataFlash_Class::ReadInt()
 long DataFlash_Class::ReadLong()
 {
   long result;
-  
+
   result = ReadByte();               // First byte
-  result = (result<<8) | ReadByte(); 
+  result = (result<<8) | ReadByte();
   result = (result<<8) | ReadByte();
   result = (result<<8) | ReadByte(); // Last byte
   return result;
-- 
1.7.6.1

